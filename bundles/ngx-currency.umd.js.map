{"version":3,"file":"ngx-currency.umd.js","sources":["ng://ngx-currency/src/currency-mask.config.ts","ng://ngx-currency/src/input.manager.ts","ng://ngx-currency/src/input.service.ts","ng://ngx-currency/src/input.handler.ts","ng://ngx-currency/src/currency-mask.directive.ts","ng://ngx-currency/src/currency-mask.module.ts"],"sourcesContent":["import {InjectionToken} from \"@angular/core\";\r\n\r\nexport interface CurrencyMaskConfig {\r\n  align: string;\r\n  allowNegative: boolean;\r\n  allowZero: boolean;\r\n  decimal: string;\r\n  precision: number;\r\n  prefix: string;\r\n  suffix: string;\r\n  thousands: string;\r\n  nullable: boolean;\r\n  min?: number;\r\n  max?: number;\r\n  inputMode? : CurrencyMaskInputMode;\r\n}\r\n\r\nexport enum CurrencyMaskInputMode {\r\n  FINANCIAL,\r\n  NATURAL,\r\n}\r\n\r\nexport let CURRENCY_MASK_CONFIG = new InjectionToken<CurrencyMaskConfig>(\"currency.mask.config\");\r\n","export class InputManager {\r\n\r\n    private _storedRawValue: string;\r\n\r\n    constructor(private htmlInputElement: any) {\r\n    }\r\n\r\n    setCursorAt(position: number): void {\r\n        if (this.htmlInputElement.setSelectionRange) {\r\n            this.htmlInputElement.focus();\r\n            this.htmlInputElement.setSelectionRange(position, position);\r\n        } else if (this.htmlInputElement.createTextRange) {\r\n            let textRange = this.htmlInputElement.createTextRange();\r\n            textRange.collapse(true);\r\n            textRange.moveEnd(\"character\", position);\r\n            textRange.moveStart(\"character\", position);\r\n            textRange.select();\r\n        }\r\n    }\r\n\r\n    updateValueAndCursor(newRawValue: string, oldLength: number, selectionStart: number): void {\r\n        this.rawValue = newRawValue;\r\n        let newLength = newRawValue.length;\r\n        selectionStart = selectionStart - (oldLength - newLength);\r\n        this.setCursorAt(selectionStart);\r\n    }\r\n\r\n    get canInputMoreNumbers(): boolean {\r\n        let onlyNumbers = this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, \"\");\r\n        let haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\r\n        let selectionStart = this.inputSelection.selectionStart;\r\n        let selectionEnd = this.inputSelection.selectionEnd;\r\n        let haveNumberSelected = !!(selectionStart != selectionEnd &&\r\n                                    this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\r\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\r\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\r\n    }\r\n\r\n    get inputSelection(): any {\r\n        let selectionStart = 0;\r\n        let selectionEnd = 0;\r\n\r\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\r\n            selectionStart = this.htmlInputElement.selectionStart;\r\n            selectionEnd = this.htmlInputElement.selectionEnd;\r\n        } else {\r\n            let range = (<any>document).selection.createRange();\r\n\r\n            if (range && range.parentElement() == this.htmlInputElement) {\r\n                let lenght = this.htmlInputElement.value.length;\r\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\r\n                let startRange = this.htmlInputElement.createTextRange();\r\n                startRange.moveToBookmark(range.getBookmark());\r\n                let endRange = this.htmlInputElement.createTextRange();\r\n                endRange.collapse(false);\r\n\r\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\r\n                    selectionStart = selectionEnd = lenght;\r\n                } else {\r\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\r\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\r\n\r\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\r\n                        selectionEnd = lenght;\r\n                    } else {\r\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\r\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            selectionStart: selectionStart,\r\n            selectionEnd: selectionEnd\r\n        };\r\n    }\r\n\r\n    get rawValue(): string {\r\n        return this.htmlInputElement && this.htmlInputElement.value;\r\n    }\r\n\r\n    set rawValue(value: string) {\r\n        this._storedRawValue = value;\r\n\r\n        if (this.htmlInputElement) {\r\n            this.htmlInputElement.value = value;\r\n        }\r\n    }\r\n\r\n    get storedRawValue(): string {\r\n        return this._storedRawValue || '';\r\n    }\r\n}\r\n","import { InputManager } from \"./input.manager\";\r\nimport { CurrencyMaskConfig, CurrencyMaskInputMode } from \"./currency-mask.config\";\r\n\r\nexport class InputService {\r\n    private SINGLE_DIGIT_REGEX: RegExp = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\r\n    private ONLY_NUMBERS_REGEX: RegExp = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\r\n\r\n    PER_AR_NUMBER: Map<string, string> = new Map<string, string>();\r\n\r\n    initialize() {\r\n        this.PER_AR_NUMBER.set(\"\\u06F0\", \"0\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F1\", \"1\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F2\", \"2\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F3\", \"3\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F4\", \"4\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F5\", \"5\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F6\", \"6\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F7\", \"7\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F8\", \"8\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F9\", \"9\");\r\n\r\n        this.PER_AR_NUMBER.set(\"\\u0660\", \"0\");\r\n        this.PER_AR_NUMBER.set(\"\\u0661\", \"1\");\r\n        this.PER_AR_NUMBER.set(\"\\u0662\", \"2\");\r\n        this.PER_AR_NUMBER.set(\"\\u0663\", \"3\");\r\n        this.PER_AR_NUMBER.set(\"\\u0664\", \"4\");\r\n        this.PER_AR_NUMBER.set(\"\\u0665\", \"5\");\r\n        this.PER_AR_NUMBER.set(\"\\u0666\", \"6\");\r\n        this.PER_AR_NUMBER.set(\"\\u0667\", \"7\");\r\n        this.PER_AR_NUMBER.set(\"\\u0668\", \"8\");\r\n        this.PER_AR_NUMBER.set(\"\\u0669\", \"9\");\r\n    }\r\n\r\n    inputManager: InputManager;\r\n\r\n    constructor(private htmlInputElement: any, private options: CurrencyMaskConfig) {\r\n        this.inputManager = new InputManager(htmlInputElement);\r\n        this.initialize()\r\n    }\r\n\r\n    addNumber(keyCode: number): void {\r\n        const {decimal, precision, inputMode} = this.options;\r\n        let keyChar = String.fromCharCode(keyCode);\r\n        const isDecimalChar = keyChar === this.options.decimal;\r\n\r\n        if (!this.rawValue) {\r\n            this.rawValue = this.applyMask(false, keyChar);\r\n            let selectionStart:number = undefined;\r\n            if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {\r\n                selectionStart = this.rawValue.indexOf(decimal);\r\n                if (isDecimalChar) {\r\n                    selectionStart++;\r\n                }\r\n            }\r\n            this.updateFieldValue(selectionStart);\r\n        } else {\r\n            let selectionStart = this.inputSelection.selectionStart;\r\n            let selectionEnd = this.inputSelection.selectionEnd;\r\n            const rawValueStart = this.rawValue.substring(0, selectionStart);\r\n            let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);\r\n\r\n            // In natural mode, replace decimals instead of shifting them.\r\n            const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\r\n            if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && selectionStart === selectionEnd) {\r\n              rawValueEnd = rawValueEnd.substring(1);\r\n            }\r\n\r\n            const newValue = rawValueStart + keyChar + rawValueEnd;\r\n            let nextSelectionStart = selectionStart + 1;\r\n            const isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;\r\n            if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\r\n                // If the cursor is just before the decimal or thousands separator and the user types the\r\n                // decimal or thousands separator, move the cursor past it.\r\n                nextSelectionStart++;\r\n            } else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {\r\n                // Ignore other non-numbers.\r\n                return;\r\n            }\r\n\r\n            this.rawValue = newValue;\r\n            this.updateFieldValue(nextSelectionStart);\r\n        }\r\n    }\r\n\r\n    applyMask(isNumber: boolean, rawValue: string, disablePadAndTrim = false): string {\r\n        let {allowNegative, decimal, precision, prefix, suffix, thousands, min, max, inputMode} = this.options;\r\n\r\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\r\n        let onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\r\n\r\n        if (!onlyNumbers && rawValue !== decimal) {\r\n            return \"\";\r\n        }\r\n\r\n        if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {\r\n            rawValue = this.padOrTrimPrecision(rawValue);\r\n            onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\r\n        }\r\n\r\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision)\r\n            .replace(/^\\u0660*/g, \"\")\r\n            .replace(/^\\u06F0*/g, \"\")\r\n            .replace(/^0*/g, \"\");\r\n\r\n        if (integerPart == \"\") {\r\n            integerPart = \"0\";\r\n        }\r\n        let integerValue = parseInt(integerPart);\r\n\r\n        integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\r\n        if (thousands && integerPart.startsWith(thousands)) {\r\n            integerPart = integerPart.substring(1);\r\n        }\r\n\r\n        let newRawValue = integerPart;\r\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\r\n        let decimalValue = parseInt(decimalPart) || 0;\r\n\r\n        let isNegative = rawValue.indexOf(\"-\") > -1;\r\n\r\n        // Ensure max is at least as large as min.\r\n        max = (this.isNullOrUndefined(max) || this.isNullOrUndefined(min)) ? max : Math.max(max, min);\r\n\r\n        // Restrict to the min and max values.\r\n        let newValue = integerValue + (decimalValue / 100);\r\n        newValue = isNegative ? -newValue : newValue;\r\n        if (!this.isNullOrUndefined(max) && newValue > max) {\r\n            return this.applyMask(true, max + '');\r\n        } else if (!this.isNullOrUndefined(min) && newValue < min) {\r\n            return this.applyMask(true, min + '');\r\n        }\r\n\r\n        if (precision > 0) {\r\n            if (newRawValue == \"0\" && decimalPart.length < precision) {\r\n                newRawValue += decimal + \"0\".repeat(precision - 1) + decimalPart;\r\n            } else {\r\n                newRawValue += decimal + decimalPart;\r\n            }\r\n        }\r\n\r\n        let operator = (isNegative && allowNegative) ? \"-\" : \"\";\r\n        return operator + prefix + newRawValue + suffix;\r\n    }\r\n\r\n    padOrTrimPrecision(rawValue: string): string {\r\n        let {decimal, precision} = this.options;\r\n\r\n        let decimalIndex = rawValue.lastIndexOf(decimal);\r\n        if (decimalIndex === -1) {\r\n            decimalIndex = rawValue.length;\r\n            rawValue += decimal;\r\n        }\r\n\r\n        let decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, \"\");\r\n        const actualPrecision = decimalPortion.length;\r\n        if (actualPrecision < precision) {\r\n            for (let i = actualPrecision; i < precision; i++) {\r\n                decimalPortion += '0';\r\n            }\r\n        } else if (actualPrecision > precision) {\r\n            decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\r\n        }\r\n\r\n        return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\r\n    }\r\n\r\n    clearMask(rawValue: string): number {\r\n        if (this.isNullable() && rawValue === \"\")\r\n            return null;\r\n\r\n        let value = (rawValue || \"0\").replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\r\n\r\n        if (this.options.thousands) {\r\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\r\n        }\r\n\r\n        if (this.options.decimal) {\r\n            value = value.replace(this.options.decimal, \".\");\r\n        }\r\n\r\n        this.PER_AR_NUMBER.forEach((val: string, key: string) => {\r\n            const re = new RegExp(key, \"g\");\r\n            value = value.replace(re, val);\r\n        });\r\n        return parseFloat(value);\r\n    }\r\n\r\n    changeToNegative(): void {\r\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\") {\r\n            // Apply the mask to ensure the min and max values are enforced.\r\n            this.rawValue = this.applyMask(false, \"-\" + (this.rawValue ? this.rawValue : '0'));\r\n        }\r\n    }\r\n\r\n    changeToPositive(): void {\r\n        // Apply the mask to ensure the min and max values are enforced.\r\n        this.rawValue = this.applyMask(false, this.rawValue.replace(\"-\", \"\"));\r\n    }\r\n\r\n    removeNumber(keyCode: number): void {\r\n        let {decimal, thousands, prefix, suffix, inputMode} = this.options;\r\n\r\n        if (this.isNullable() && this.value == 0) {\r\n            this.rawValue = null;\r\n            return;\r\n        }\r\n\r\n        let selectionEnd = this.inputSelection.selectionEnd;\r\n        let selectionStart = this.inputSelection.selectionStart;\r\n\r\n        const suffixStart = this.rawValue.length - suffix.length;\r\n        selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\r\n        selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));\r\n\r\n        // Check if selection was entirely in the prefix or suffix. \r\n        if (selectionStart === selectionEnd &&\r\n            this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\r\n            this.updateFieldValue(selectionStart);\r\n            return;\r\n        }\r\n\r\n        let decimalIndex = this.rawValue.indexOf(decimal);\r\n        if (decimalIndex === -1) {\r\n            decimalIndex = this.rawValue.length;\r\n        }\r\n\r\n        let shiftSelection = 0;\r\n        let insertChars = '';\r\n        const isCursorInDecimals = decimalIndex < selectionEnd;\r\n        const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\r\n        if (selectionEnd === selectionStart) {\r\n            if (keyCode == 8) {\r\n                if (selectionStart <= prefix.length) {\r\n                    return;\r\n                }\r\n                selectionStart--;\r\n\r\n                // If previous char isn't a number, go back one more.\r\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\r\n                    selectionStart--;\r\n                }\r\n\r\n                // In natural mode, jump backwards when in decimal portion of number.\r\n                if (inputMode === CurrencyMaskInputMode.NATURAL && isCursorInDecimals) {\r\n                    shiftSelection = -1;\r\n                    // when removing a single whole number, replace it with 0\r\n                    if (isCursorImmediatelyAfterDecimalPoint && this.value < 10 && this.value > -10) {\r\n                        insertChars += '0';\r\n                    }\r\n                }\r\n            } else if (keyCode == 46 || keyCode == 63272) {\r\n                if (selectionStart === suffixStart) {\r\n                    return;\r\n                }\r\n                selectionEnd++;\r\n\r\n                // If next char isn't a number, go one more.\r\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\r\n                    selectionStart++;\r\n                    selectionEnd++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // In natural mode, replace decimals with 0s.\r\n        if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {\r\n            const replacedDecimalCount = selectionEnd - selectionStart;\r\n            for (let i = 0; i < replacedDecimalCount; i++) {\r\n                insertChars += '0';\r\n            }\r\n        }\r\n\r\n        let selectionFromEnd = this.rawValue.length - selectionEnd;\r\n        this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd);\r\n\r\n        // Remove leading thousand separator from raw value.\r\n        const startChar = this.rawValue.substr(prefix.length, 1);\r\n        if (startChar === thousands) {\r\n            this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\r\n            selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\r\n        }\r\n\r\n        this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\r\n    }\r\n\r\n    updateFieldValue(selectionStart?: number, disablePadAndTrim = false): void {\r\n        let newRawValue = this.applyMask(false, this.rawValue || \"\", disablePadAndTrim);\r\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\r\n        selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));\r\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\r\n    }\r\n\r\n    updateOptions(options: any): void {\r\n        let value: number = this.value;\r\n        this.options = options;\r\n        this.value = value;\r\n    }\r\n\r\n    prefixLength(): any {\r\n        return this.options.prefix.length;\r\n    }\r\n\r\n    suffixLength(): any {\r\n        return this.options.suffix.length;\r\n    }\r\n\r\n    isNullable() {\r\n        return this.options.nullable;\r\n    }\r\n\r\n    get canInputMoreNumbers(): boolean {\r\n        return this.inputManager.canInputMoreNumbers;\r\n    }\r\n\r\n    get inputSelection(): any {\r\n        return this.inputManager.inputSelection;\r\n    }\r\n\r\n    get rawValue(): string {\r\n        return this.inputManager.rawValue;\r\n    }\r\n\r\n    set rawValue(value: string) {\r\n        this.inputManager.rawValue = value;\r\n    }\r\n\r\n    get storedRawValue(): string {\r\n        return this.inputManager.storedRawValue;\r\n    }\r\n\r\n    get value(): number {\r\n        return this.clearMask(this.rawValue);\r\n    }\r\n\r\n    set value(value: number) {\r\n        this.rawValue = this.applyMask(true, \"\" + value);\r\n    }\r\n\r\n    private isNullOrUndefined(value: any) {\r\n        return value === null || value === undefined;\r\n    }\r\n}\r\n","import {InputService} from \"./input.service\";\r\n\r\nexport class InputHandler {\r\n\r\n    private inputService: InputService;\r\n    private onModelChange: Function;\r\n    private onModelTouched: Function;\r\n\r\n    constructor(htmlInputElement: HTMLInputElement, options: any) {\r\n        this.inputService = new InputService(htmlInputElement, options);\r\n    }\r\n\r\n    handleCut(event: any): void {\r\n        setTimeout(() => {\r\n            this.inputService.updateFieldValue();\r\n            this.setValue(this.inputService.value);\r\n            this.onModelChange(this.inputService.value);\r\n        }, 0);\r\n    }\r\n\r\n    handleInput(event: any): void {\r\n        let selectionStart = this.inputService.inputSelection.selectionStart;\r\n        let keyCode = this.inputService.rawValue.charCodeAt(selectionStart - 1);\r\n        let rawValueLength = this.inputService.rawValue.length;\r\n        let storedRawValueLength = this.inputService.storedRawValue.length;\r\n\r\n        if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\r\n            this.inputService.updateFieldValue(selectionStart);\r\n            this.onModelChange(this.inputService.value);\r\n            return;\r\n        }\r\n\r\n        // Restore the old value.\r\n        this.inputService.rawValue = this.inputService.storedRawValue;\r\n\r\n        if (rawValueLength < storedRawValueLength) {\r\n            // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\r\n            // input event, so we need to wrap this in a timeout.\r\n            this.timer(() => {\r\n                // Move the cursor to just after the deleted value.\r\n                this.inputService.updateFieldValue(selectionStart + 1);\r\n\r\n                // Then backspace it.\r\n                this.inputService.removeNumber(8);\r\n                this.onModelChange(this.inputService.value);  \r\n            }, 0);\r\n        }\r\n\r\n        if (rawValueLength > storedRawValueLength) {\r\n            // Move the cursor to just before the new value.\r\n            this.inputService.updateFieldValue(selectionStart - 1);\r\n\r\n            // Process the character like a keypress.\r\n            this.handleKeypressImpl(keyCode);\r\n        }\r\n    }\r\n\r\n    handleKeydown(event: any): void {\r\n        let keyCode = event.which || event.charCode || event.keyCode;\r\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\r\n            event.preventDefault();\r\n\r\n            if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() &&\r\n                this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {\r\n                this.clearValue();\r\n            } else {\r\n                this.inputService.removeNumber(keyCode);\r\n                this.onModelChange(this.inputService.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearValue() {\r\n        this.setValue(this.inputService.isNullable() ? null : 0);\r\n        this.onModelChange(this.inputService.value);\r\n    }\r\n\r\n    handleKeypress(event: any): void {\r\n        let keyCode = event.which || event.charCode || event.keyCode;\r\n        event.preventDefault();\r\n        if (keyCode === 97 && event.ctrlKey) {\r\n            return;\r\n        }\r\n\r\n        this.handleKeypressImpl(keyCode);\r\n    }\r\n\r\n    private handleKeypressImpl(keyCode: number): void {\r\n        switch (keyCode) {\r\n            case undefined:\r\n            case 9:\r\n            case 13:\r\n                return;\r\n            case 43:\r\n                this.inputService.changeToPositive();\r\n                break;\r\n            case 45:\r\n                this.inputService.changeToNegative();\r\n                break;\r\n            default:\r\n                if (this.inputService.canInputMoreNumbers) {\r\n                    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\r\n\r\n                    if (selectionRangeLength == this.inputService.rawValue.length) {\r\n                        this.setValue(null);\r\n                    }\r\n\r\n                    this.inputService.addNumber(keyCode);\r\n                }\r\n                break;\r\n        }\r\n\r\n        this.onModelChange(this.inputService.value);\r\n    }\r\n\r\n    handlePaste(event: any): void {\r\n        setTimeout(() => {\r\n            this.inputService.updateFieldValue();\r\n            this.setValue(this.inputService.value);\r\n            this.onModelChange(this.inputService.value);\r\n        }, 1);\r\n    }\r\n\r\n    updateOptions(options: any): void {\r\n        this.inputService.updateOptions(options);\r\n    }\r\n\r\n    getOnModelChange(): Function {\r\n        return this.onModelChange;\r\n    }\r\n\r\n    setOnModelChange(callbackFunction: Function): void {\r\n        this.onModelChange = callbackFunction;\r\n    }\r\n\r\n    getOnModelTouched(): Function {\r\n        return this.onModelTouched;\r\n    }\r\n\r\n    setOnModelTouched(callbackFunction: Function) {\r\n        this.onModelTouched = callbackFunction;\r\n    }\r\n\r\n    setValue(value: number): void {\r\n        this.inputService.value = value;\r\n    }\r\n\r\n    /**\r\n     * Passthrough to setTimeout that can be stubbed out in tests.\r\n     */\r\n    private timer(callback: () => void, delayMillis: number) {\r\n        setTimeout(callback, delayMillis);\r\n    }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostListener,\r\n  Inject,\r\n  KeyValueDiffer,\r\n  KeyValueDiffers,\r\n  Input,\r\n  OnInit,\r\n  Optional\r\n} from \"@angular/core\";\r\n\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\r\nimport {CurrencyMaskConfig, CURRENCY_MASK_CONFIG, CurrencyMaskInputMode} from \"./currency-mask.config\";\r\nimport {InputHandler} from \"./input.handler\";\r\n\r\nexport const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => CurrencyMaskDirective),\r\n  multi: true,\r\n};\r\n\r\n@Directive({\r\n    selector: \"[currencyMask]\",\r\n    providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR]\r\n})\r\nexport class CurrencyMaskDirective implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit {\r\n\r\n  @Input() options: Partial<CurrencyMaskConfig> = {};\r\n\r\n  public inputHandler: InputHandler;\r\n  public keyValueDiffer: KeyValueDiffer<any, any>;\r\n\r\n  public optionsTemplate: CurrencyMaskConfig = {\r\n      align: \"right\",\r\n      allowNegative: true,\r\n      allowZero: true,\r\n      decimal: \".\",\r\n      precision: 2,\r\n      prefix: \"$ \",\r\n      suffix: \"\",\r\n      thousands: \",\",\r\n      nullable: false,\r\n      inputMode: CurrencyMaskInputMode.FINANCIAL\r\n  };\r\n\r\n  constructor(@Optional() @Inject(CURRENCY_MASK_CONFIG) private currencyMaskConfig: CurrencyMaskConfig,\r\n                                                        private elementRef: ElementRef,\r\n                                                        private keyValueDiffers: KeyValueDiffers) {\r\n    if (currencyMaskConfig) {\r\n        this.optionsTemplate = currencyMaskConfig;\r\n    }\r\n\r\n    this.keyValueDiffer = keyValueDiffers.find({}).create();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.keyValueDiffer.diff(this.options)) {\r\n      this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\r\n      this.inputHandler.updateOptions((<any>Object).assign({}, this.optionsTemplate, this.options));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.inputHandler = new InputHandler(this.elementRef.nativeElement, (<any>Object).assign({}, this.optionsTemplate, this.options));\r\n  }\r\n\r\n  @HostListener(\"blur\", [\"$event\"])\r\n  handleBlur(event: any) {\r\n    this.inputHandler.getOnModelTouched().apply(event);\r\n  }\r\n\r\n  @HostListener(\"cut\", [\"$event\"])\r\n  handleCut(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleCut(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"input\", [\"$event\"])\r\n  handleInput(event: any) {\r\n    if (this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleInput(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"keydown\", [\"$event\"])\r\n  handleKeydown(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleKeydown(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"keypress\", [\"$event\"])\r\n  handleKeypress(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleKeypress(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"paste\", [\"$event\"])\r\n  handlePaste(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handlePaste(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"drop\", [\"$event\"])\r\n  handleDrop(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  isChromeAndroid(): boolean {\r\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\r\n  }\r\n\r\n  isReadOnly(): boolean {\r\n    return this.elementRef.nativeElement.hasAttribute('readonly')\r\n  }\r\n\r\n  registerOnChange(callbackFunction: Function): void {\r\n    this.inputHandler.setOnModelChange(callbackFunction);\r\n  }\r\n\r\n  registerOnTouched(callbackFunction: Function): void {\r\n    this.inputHandler.setOnModelTouched(callbackFunction);\r\n  }\r\n\r\n  setDisabledState(value: boolean): void {\r\n    this.elementRef.nativeElement.disabled = value;\r\n  }\r\n\r\n  writeValue(value: number): void {\r\n    this.inputHandler.setValue(value);\r\n  }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {CurrencyMaskDirective} from \"./currency-mask.directive\";\r\nimport {CURRENCY_MASK_CONFIG, CurrencyMaskConfig} from \"./currency-mask.config\";\r\n\r\n@NgModule({\r\n  imports: [ CommonModule, FormsModule ],\r\n  declarations: [ CurrencyMaskDirective ],\r\n  exports: [ CurrencyMaskDirective ]\r\n})\r\nexport class NgxCurrencyModule {\r\n  static forRoot(config: CurrencyMaskConfig): ModuleWithProviders<NgxCurrencyModule> {\r\n    return {\r\n      ngModule: NgxCurrencyModule,\r\n      providers: [{\r\n        provide: CURRENCY_MASK_CONFIG,\r\n        useValue: config,\r\n      }]\r\n    }\r\n  }\r\n}\r\n"],"names":["CurrencyMaskInputMode","InjectionToken","NG_VALUE_ACCESSOR","forwardRef","Optional","Inject","ElementRef","KeyValueDiffers","Directive","Input","HostListener","NgModule","CommonModule","FormsModule"],"mappings":"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"}