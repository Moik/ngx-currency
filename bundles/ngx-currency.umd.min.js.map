{"version":3,"sources":["ng://ngx-currency/src/currency-mask.config.ts","ng://ngx-currency/src/input.manager.ts","ng://ngx-currency/src/input.service.ts","ng://ngx-currency/src/input.handler.ts","ng://ngx-currency/src/currency-mask.directive.ts","ng://ngx-currency/src/currency-mask.module.ts"],"names":["CurrencyMaskInputMode","CURRENCY_MASK_CONFIG","InjectionToken","InputManager","htmlInputElement","this","prototype","setCursorAt","position","setSelectionRange","focus","createTextRange","textRange","collapse","moveEnd","moveStart","select","updateValueAndCursor","newRawValue","oldLength","selectionStart","rawValue","length","Object","defineProperty","haventReachedMaxLength","replace","maxLength","inputSelection","selectionEnd","haveNumberSelected","value","substring","match","startWithZero","range","document","selection","createRange","parentElement","lenght","normalizedValue","startRange","moveToBookmark","getBookmark","endRange","compareEndPoints","slice","split","_storedRawValue","InputService","options","SINGLE_DIGIT_REGEX","RegExp","ONLY_NUMBERS_REGEX","PER_AR_NUMBER","Map","inputManager","initialize","set","addNumber","keyCode","_a","decimal","precision","inputMode","keyChar","String","fromCharCode","isDecimalChar","rawValueStart","rawValueEnd","inDecimalPortion","indexOf","NATURAL","newValue","nextSelectionStart","thousands","test","updateFieldValue","applyMask","undefined","isNumber","disablePadAndTrim","allowNegative","prefix","suffix","min","max","onlyNumbers","Number","toFixed","padOrTrimPrecision","integerPart","integerValue","parseInt","startsWith","decimalPart","decimalValue","isNegative","isNullOrUndefined","Math","repeat","decimalIndex","lastIndexOf","decimalPortion","actualPrecision","i","clearMask","isNullable","forEach","val","key","re","parseFloat","changeToNegative","charAt","changeToPositive","removeNumber","suffixStart","shiftSelection","insertChars","isCursorInDecimals","isCursorImmediatelyAfterDecimalPoint","substr","replacedDecimalCount","selectionFromEnd","updateOptions","prefixLength","suffixLength","nullable","canInputMoreNumbers","storedRawValue","InputHandler","inputService","handleCut","event","_this","setTimeout","setValue","onModelChange","handleInput","charCodeAt","rawValueLength","storedRawValueLength","abs","timer","handleKeypressImpl","handleKeydown","which","charCode","preventDefault","clearValue","handleKeypress","ctrlKey","handlePaste","getOnModelChange","setOnModelChange","callbackFunction","getOnModelTouched","onModelTouched","setOnModelTouched","callback","delayMillis","CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CurrencyMaskDirective","multi","currencyMaskConfig","elementRef","keyValueDiffers","optionsTemplate","align","allowZero","FINANCIAL","keyValueDiffer","find","create","ngAfterViewInit","nativeElement","style","textAlign","ngDoCheck","diff","inputHandler","assign","ngOnInit","handleBlur","apply","isChromeAndroid","isReadOnly","handleDrop","navigator","userAgent","hasAttribute","registerOnChange","registerOnTouched","setDisabledState","disabled","writeValue","Optional","type","Inject","args","ElementRef","KeyValueDiffers","Directive","selector","providers","Input","HostListener","NgxCurrencyModule","forRoot","config","ngModule","useValue","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import {InjectionToken} from \"@angular/core\";\r\n\r\nexport interface CurrencyMaskConfig {\r\n  align: string;\r\n  allowNegative: boolean;\r\n  allowZero: boolean;\r\n  decimal: string;\r\n  precision: number;\r\n  prefix: string;\r\n  suffix: string;\r\n  thousands: string;\r\n  nullable: boolean;\r\n  min?: number;\r\n  max?: number;\r\n  inputMode? : CurrencyMaskInputMode;\r\n}\r\n\r\nexport enum CurrencyMaskInputMode {\r\n  FINANCIAL,\r\n  NATURAL,\r\n}\r\n\r\nexport let CURRENCY_MASK_CONFIG = new InjectionToken<CurrencyMaskConfig>(\"currency.mask.config\");\r\n","export class InputManager {\r\n\r\n    private _storedRawValue: string;\r\n\r\n    constructor(private htmlInputElement: any) {\r\n    }\r\n\r\n    setCursorAt(position: number): void {\r\n        if (this.htmlInputElement.setSelectionRange) {\r\n            this.htmlInputElement.focus();\r\n            this.htmlInputElement.setSelectionRange(position, position);\r\n        } else if (this.htmlInputElement.createTextRange) {\r\n            let textRange = this.htmlInputElement.createTextRange();\r\n            textRange.collapse(true);\r\n            textRange.moveEnd(\"character\", position);\r\n            textRange.moveStart(\"character\", position);\r\n            textRange.select();\r\n        }\r\n    }\r\n\r\n    updateValueAndCursor(newRawValue: string, oldLength: number, selectionStart: number): void {\r\n        this.rawValue = newRawValue;\r\n        let newLength = newRawValue.length;\r\n        selectionStart = selectionStart - (oldLength - newLength);\r\n        this.setCursorAt(selectionStart);\r\n    }\r\n\r\n    get canInputMoreNumbers(): boolean {\r\n        let onlyNumbers = this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, \"\");\r\n        let haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\r\n        let selectionStart = this.inputSelection.selectionStart;\r\n        let selectionEnd = this.inputSelection.selectionEnd;\r\n        let haveNumberSelected = !!(selectionStart != selectionEnd &&\r\n                                    this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\r\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\r\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\r\n    }\r\n\r\n    get inputSelection(): any {\r\n        let selectionStart = 0;\r\n        let selectionEnd = 0;\r\n\r\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\r\n            selectionStart = this.htmlInputElement.selectionStart;\r\n            selectionEnd = this.htmlInputElement.selectionEnd;\r\n        } else {\r\n            let range = (<any>document).selection.createRange();\r\n\r\n            if (range && range.parentElement() == this.htmlInputElement) {\r\n                let lenght = this.htmlInputElement.value.length;\r\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\r\n                let startRange = this.htmlInputElement.createTextRange();\r\n                startRange.moveToBookmark(range.getBookmark());\r\n                let endRange = this.htmlInputElement.createTextRange();\r\n                endRange.collapse(false);\r\n\r\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\r\n                    selectionStart = selectionEnd = lenght;\r\n                } else {\r\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\r\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\r\n\r\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\r\n                        selectionEnd = lenght;\r\n                    } else {\r\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\r\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            selectionStart: selectionStart,\r\n            selectionEnd: selectionEnd\r\n        };\r\n    }\r\n\r\n    get rawValue(): string {\r\n        return this.htmlInputElement && this.htmlInputElement.value;\r\n    }\r\n\r\n    set rawValue(value: string) {\r\n        this._storedRawValue = value;\r\n\r\n        if (this.htmlInputElement) {\r\n            this.htmlInputElement.value = value;\r\n        }\r\n    }\r\n\r\n    get storedRawValue(): string {\r\n        return this._storedRawValue || '';\r\n    }\r\n}\r\n","import { InputManager } from \"./input.manager\";\r\nimport { CurrencyMaskConfig, CurrencyMaskInputMode } from \"./currency-mask.config\";\r\n\r\nexport class InputService {\r\n    private SINGLE_DIGIT_REGEX: RegExp = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\r\n    private ONLY_NUMBERS_REGEX: RegExp = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\r\n\r\n    PER_AR_NUMBER: Map<string, string> = new Map<string, string>();\r\n\r\n    initialize() {\r\n        this.PER_AR_NUMBER.set(\"\\u06F0\", \"0\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F1\", \"1\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F2\", \"2\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F3\", \"3\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F4\", \"4\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F5\", \"5\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F6\", \"6\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F7\", \"7\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F8\", \"8\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F9\", \"9\");\r\n\r\n        this.PER_AR_NUMBER.set(\"\\u0660\", \"0\");\r\n        this.PER_AR_NUMBER.set(\"\\u0661\", \"1\");\r\n        this.PER_AR_NUMBER.set(\"\\u0662\", \"2\");\r\n        this.PER_AR_NUMBER.set(\"\\u0663\", \"3\");\r\n        this.PER_AR_NUMBER.set(\"\\u0664\", \"4\");\r\n        this.PER_AR_NUMBER.set(\"\\u0665\", \"5\");\r\n        this.PER_AR_NUMBER.set(\"\\u0666\", \"6\");\r\n        this.PER_AR_NUMBER.set(\"\\u0667\", \"7\");\r\n        this.PER_AR_NUMBER.set(\"\\u0668\", \"8\");\r\n        this.PER_AR_NUMBER.set(\"\\u0669\", \"9\");\r\n    }\r\n\r\n    inputManager: InputManager;\r\n\r\n    constructor(private htmlInputElement: any, private options: CurrencyMaskConfig) {\r\n        this.inputManager = new InputManager(htmlInputElement);\r\n        this.initialize()\r\n    }\r\n\r\n    addNumber(keyCode: number): void {\r\n        const {decimal, precision, inputMode} = this.options;\r\n        let keyChar = String.fromCharCode(keyCode);\r\n        const isDecimalChar = keyChar === this.options.decimal;\r\n\r\n        if (!this.rawValue) {\r\n            this.rawValue = this.applyMask(false, keyChar);\r\n            let selectionStart:number = undefined;\r\n            if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {\r\n                selectionStart = this.rawValue.indexOf(decimal);\r\n                if (isDecimalChar) {\r\n                    selectionStart++;\r\n                }\r\n            }\r\n            this.updateFieldValue(selectionStart);\r\n        } else {\r\n            let selectionStart = this.inputSelection.selectionStart;\r\n            let selectionEnd = this.inputSelection.selectionEnd;\r\n            const rawValueStart = this.rawValue.substring(0, selectionStart);\r\n            let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);\r\n\r\n            // In natural mode, replace decimals instead of shifting them.\r\n            const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\r\n            if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && selectionStart === selectionEnd) {\r\n              rawValueEnd = rawValueEnd.substring(1);\r\n            }\r\n\r\n            const newValue = rawValueStart + keyChar + rawValueEnd;\r\n            let nextSelectionStart = selectionStart + 1;\r\n            const isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;\r\n            if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\r\n                // If the cursor is just before the decimal or thousands separator and the user types the\r\n                // decimal or thousands separator, move the cursor past it.\r\n                nextSelectionStart++;\r\n            } else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {\r\n                // Ignore other non-numbers.\r\n                return;\r\n            }\r\n\r\n            this.rawValue = newValue;\r\n            this.updateFieldValue(nextSelectionStart);\r\n        }\r\n    }\r\n\r\n    applyMask(isNumber: boolean, rawValue: string, disablePadAndTrim = false): string {\r\n        let {allowNegative, decimal, precision, prefix, suffix, thousands, min, max, inputMode} = this.options;\r\n\r\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\r\n        let onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\r\n\r\n        if (!onlyNumbers && rawValue !== decimal) {\r\n            return \"\";\r\n        }\r\n\r\n        if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {\r\n            rawValue = this.padOrTrimPrecision(rawValue);\r\n            onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\r\n        }\r\n\r\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision)\r\n            .replace(/^\\u0660*/g, \"\")\r\n            .replace(/^\\u06F0*/g, \"\")\r\n            .replace(/^0*/g, \"\");\r\n\r\n        if (integerPart == \"\") {\r\n            integerPart = \"0\";\r\n        }\r\n        let integerValue = parseInt(integerPart);\r\n\r\n        integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\r\n        if (thousands && integerPart.startsWith(thousands)) {\r\n            integerPart = integerPart.substring(1);\r\n        }\r\n\r\n        let newRawValue = integerPart;\r\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\r\n        let decimalValue = parseInt(decimalPart) || 0;\r\n\r\n        let isNegative = rawValue.indexOf(\"-\") > -1;\r\n\r\n        // Ensure max is at least as large as min.\r\n        max = (this.isNullOrUndefined(max) || this.isNullOrUndefined(min)) ? max : Math.max(max, min);\r\n\r\n        // Restrict to the min and max values.\r\n        let newValue = integerValue + (decimalValue / 100);\r\n        newValue = isNegative ? -newValue : newValue;\r\n        if (!this.isNullOrUndefined(max) && newValue > max) {\r\n            return this.applyMask(true, max + '');\r\n        } else if (!this.isNullOrUndefined(min) && newValue < min) {\r\n            return this.applyMask(true, min + '');\r\n        }\r\n\r\n        if (precision > 0) {\r\n            if (newRawValue == \"0\" && decimalPart.length < precision) {\r\n                newRawValue += decimal + \"0\".repeat(precision - 1) + decimalPart;\r\n            } else {\r\n                newRawValue += decimal + decimalPart;\r\n            }\r\n        }\r\n\r\n        let operator = (isNegative && allowNegative) ? \"-\" : \"\";\r\n        return operator + prefix + newRawValue + suffix;\r\n    }\r\n\r\n    padOrTrimPrecision(rawValue: string): string {\r\n        let {decimal, precision} = this.options;\r\n\r\n        let decimalIndex = rawValue.lastIndexOf(decimal);\r\n        if (decimalIndex === -1) {\r\n            decimalIndex = rawValue.length;\r\n            rawValue += decimal;\r\n        }\r\n\r\n        let decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, \"\");\r\n        const actualPrecision = decimalPortion.length;\r\n        if (actualPrecision < precision) {\r\n            for (let i = actualPrecision; i < precision; i++) {\r\n                decimalPortion += '0';\r\n            }\r\n        } else if (actualPrecision > precision) {\r\n            decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\r\n        }\r\n\r\n        return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\r\n    }\r\n\r\n    clearMask(rawValue: string): number {\r\n        if (this.isNullable() && rawValue === \"\")\r\n            return null;\r\n\r\n        let value = (rawValue || \"0\").replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\r\n\r\n        if (this.options.thousands) {\r\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\r\n        }\r\n\r\n        if (this.options.decimal) {\r\n            value = value.replace(this.options.decimal, \".\");\r\n        }\r\n\r\n        this.PER_AR_NUMBER.forEach((val: string, key: string) => {\r\n            const re = new RegExp(key, \"g\");\r\n            value = value.replace(re, val);\r\n        });\r\n        return parseFloat(value);\r\n    }\r\n\r\n    changeToNegative(): void {\r\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\") {\r\n            // Apply the mask to ensure the min and max values are enforced.\r\n            this.rawValue = this.applyMask(false, \"-\" + (this.rawValue ? this.rawValue : '0'));\r\n        }\r\n    }\r\n\r\n    changeToPositive(): void {\r\n        // Apply the mask to ensure the min and max values are enforced.\r\n        this.rawValue = this.applyMask(false, this.rawValue.replace(\"-\", \"\"));\r\n    }\r\n\r\n    removeNumber(keyCode: number): void {\r\n        let {decimal, thousands, prefix, suffix, inputMode} = this.options;\r\n\r\n        if (this.isNullable() && this.value == 0) {\r\n            this.rawValue = null;\r\n            return;\r\n        }\r\n\r\n        let selectionEnd = this.inputSelection.selectionEnd;\r\n        let selectionStart = this.inputSelection.selectionStart;\r\n\r\n        const suffixStart = this.rawValue.length - suffix.length;\r\n        selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\r\n        selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));\r\n\r\n        // Check if selection was entirely in the prefix or suffix. \r\n        if (selectionStart === selectionEnd &&\r\n            this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\r\n            this.updateFieldValue(selectionStart);\r\n            return;\r\n        }\r\n\r\n        let decimalIndex = this.rawValue.indexOf(decimal);\r\n        if (decimalIndex === -1) {\r\n            decimalIndex = this.rawValue.length;\r\n        }\r\n\r\n        let shiftSelection = 0;\r\n        let insertChars = '';\r\n        const isCursorInDecimals = decimalIndex < selectionEnd;\r\n        const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\r\n        if (selectionEnd === selectionStart) {\r\n            if (keyCode == 8) {\r\n                if (selectionStart <= prefix.length) {\r\n                    return;\r\n                }\r\n                selectionStart--;\r\n\r\n                // If previous char isn't a number, go back one more.\r\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\r\n                    selectionStart--;\r\n                }\r\n\r\n                // In natural mode, jump backwards when in decimal portion of number.\r\n                if (inputMode === CurrencyMaskInputMode.NATURAL && isCursorInDecimals) {\r\n                    shiftSelection = -1;\r\n                    // when removing a single whole number, replace it with 0\r\n                    if (isCursorImmediatelyAfterDecimalPoint && this.value < 10 && this.value > -10) {\r\n                        insertChars += '0';\r\n                    }\r\n                }\r\n            } else if (keyCode == 46 || keyCode == 63272) {\r\n                if (selectionStart === suffixStart) {\r\n                    return;\r\n                }\r\n                selectionEnd++;\r\n\r\n                // If next char isn't a number, go one more.\r\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\r\n                    selectionStart++;\r\n                    selectionEnd++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // In natural mode, replace decimals with 0s.\r\n        if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {\r\n            const replacedDecimalCount = selectionEnd - selectionStart;\r\n            for (let i = 0; i < replacedDecimalCount; i++) {\r\n                insertChars += '0';\r\n            }\r\n        }\r\n\r\n        let selectionFromEnd = this.rawValue.length - selectionEnd;\r\n        this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd);\r\n\r\n        // Remove leading thousand separator from raw value.\r\n        const startChar = this.rawValue.substr(prefix.length, 1);\r\n        if (startChar === thousands) {\r\n            this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\r\n            selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\r\n        }\r\n\r\n        this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\r\n    }\r\n\r\n    updateFieldValue(selectionStart?: number, disablePadAndTrim = false): void {\r\n        let newRawValue = this.applyMask(false, this.rawValue || \"\", disablePadAndTrim);\r\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\r\n        selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));\r\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\r\n    }\r\n\r\n    updateOptions(options: any): void {\r\n        let value: number = this.value;\r\n        this.options = options;\r\n        this.value = value;\r\n    }\r\n\r\n    prefixLength(): any {\r\n        return this.options.prefix.length;\r\n    }\r\n\r\n    suffixLength(): any {\r\n        return this.options.suffix.length;\r\n    }\r\n\r\n    isNullable() {\r\n        return this.options.nullable;\r\n    }\r\n\r\n    get canInputMoreNumbers(): boolean {\r\n        return this.inputManager.canInputMoreNumbers;\r\n    }\r\n\r\n    get inputSelection(): any {\r\n        return this.inputManager.inputSelection;\r\n    }\r\n\r\n    get rawValue(): string {\r\n        return this.inputManager.rawValue;\r\n    }\r\n\r\n    set rawValue(value: string) {\r\n        this.inputManager.rawValue = value;\r\n    }\r\n\r\n    get storedRawValue(): string {\r\n        return this.inputManager.storedRawValue;\r\n    }\r\n\r\n    get value(): number {\r\n        return this.clearMask(this.rawValue);\r\n    }\r\n\r\n    set value(value: number) {\r\n        this.rawValue = this.applyMask(true, \"\" + value);\r\n    }\r\n\r\n    private isNullOrUndefined(value: any) {\r\n        return value === null || value === undefined;\r\n    }\r\n}\r\n","import {InputService} from \"./input.service\";\r\n\r\nexport class InputHandler {\r\n\r\n    private inputService: InputService;\r\n    private onModelChange: Function;\r\n    private onModelTouched: Function;\r\n\r\n    constructor(htmlInputElement: HTMLInputElement, options: any) {\r\n        this.inputService = new InputService(htmlInputElement, options);\r\n    }\r\n\r\n    handleCut(event: any): void {\r\n        setTimeout(() => {\r\n            this.inputService.updateFieldValue();\r\n            this.setValue(this.inputService.value);\r\n            this.onModelChange(this.inputService.value);\r\n        }, 0);\r\n    }\r\n\r\n    handleInput(event: any): void {\r\n        let selectionStart = this.inputService.inputSelection.selectionStart;\r\n        let keyCode = this.inputService.rawValue.charCodeAt(selectionStart - 1);\r\n        let rawValueLength = this.inputService.rawValue.length;\r\n        let storedRawValueLength = this.inputService.storedRawValue.length;\r\n\r\n        if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\r\n            this.inputService.updateFieldValue(selectionStart);\r\n            this.onModelChange(this.inputService.value);\r\n            return;\r\n        }\r\n\r\n        // Restore the old value.\r\n        this.inputService.rawValue = this.inputService.storedRawValue;\r\n\r\n        if (rawValueLength < storedRawValueLength) {\r\n            // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\r\n            // input event, so we need to wrap this in a timeout.\r\n            this.timer(() => {\r\n                // Move the cursor to just after the deleted value.\r\n                this.inputService.updateFieldValue(selectionStart + 1);\r\n\r\n                // Then backspace it.\r\n                this.inputService.removeNumber(8);\r\n                this.onModelChange(this.inputService.value);  \r\n            }, 0);\r\n        }\r\n\r\n        if (rawValueLength > storedRawValueLength) {\r\n            // Move the cursor to just before the new value.\r\n            this.inputService.updateFieldValue(selectionStart - 1);\r\n\r\n            // Process the character like a keypress.\r\n            this.handleKeypressImpl(keyCode);\r\n        }\r\n    }\r\n\r\n    handleKeydown(event: any): void {\r\n        let keyCode = event.which || event.charCode || event.keyCode;\r\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\r\n            event.preventDefault();\r\n\r\n            if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() &&\r\n                this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {\r\n                this.clearValue();\r\n            } else {\r\n                this.inputService.removeNumber(keyCode);\r\n                this.onModelChange(this.inputService.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearValue() {\r\n        this.setValue(this.inputService.isNullable() ? null : 0);\r\n        this.onModelChange(this.inputService.value);\r\n    }\r\n\r\n    handleKeypress(event: any): void {\r\n        let keyCode = event.which || event.charCode || event.keyCode;\r\n        event.preventDefault();\r\n        if (keyCode === 97 && event.ctrlKey) {\r\n            return;\r\n        }\r\n\r\n        this.handleKeypressImpl(keyCode);\r\n    }\r\n\r\n    private handleKeypressImpl(keyCode: number): void {\r\n        switch (keyCode) {\r\n            case undefined:\r\n            case 9:\r\n            case 13:\r\n                return;\r\n            case 43:\r\n                this.inputService.changeToPositive();\r\n                break;\r\n            case 45:\r\n                this.inputService.changeToNegative();\r\n                break;\r\n            default:\r\n                if (this.inputService.canInputMoreNumbers) {\r\n                    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\r\n\r\n                    if (selectionRangeLength == this.inputService.rawValue.length) {\r\n                        this.setValue(null);\r\n                    }\r\n\r\n                    this.inputService.addNumber(keyCode);\r\n                }\r\n                break;\r\n        }\r\n\r\n        this.onModelChange(this.inputService.value);\r\n    }\r\n\r\n    handlePaste(event: any): void {\r\n        setTimeout(() => {\r\n            this.inputService.updateFieldValue();\r\n            this.setValue(this.inputService.value);\r\n            this.onModelChange(this.inputService.value);\r\n        }, 1);\r\n    }\r\n\r\n    updateOptions(options: any): void {\r\n        this.inputService.updateOptions(options);\r\n    }\r\n\r\n    getOnModelChange(): Function {\r\n        return this.onModelChange;\r\n    }\r\n\r\n    setOnModelChange(callbackFunction: Function): void {\r\n        this.onModelChange = callbackFunction;\r\n    }\r\n\r\n    getOnModelTouched(): Function {\r\n        return this.onModelTouched;\r\n    }\r\n\r\n    setOnModelTouched(callbackFunction: Function) {\r\n        this.onModelTouched = callbackFunction;\r\n    }\r\n\r\n    setValue(value: number): void {\r\n        this.inputService.value = value;\r\n    }\r\n\r\n    /**\r\n     * Passthrough to setTimeout that can be stubbed out in tests.\r\n     */\r\n    private timer(callback: () => void, delayMillis: number) {\r\n        setTimeout(callback, delayMillis);\r\n    }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostListener,\r\n  Inject,\r\n  KeyValueDiffer,\r\n  KeyValueDiffers,\r\n  Input,\r\n  OnInit,\r\n  Optional\r\n} from \"@angular/core\";\r\n\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\r\nimport {CurrencyMaskConfig, CURRENCY_MASK_CONFIG, CurrencyMaskInputMode} from \"./currency-mask.config\";\r\nimport {InputHandler} from \"./input.handler\";\r\n\r\nexport const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => CurrencyMaskDirective),\r\n  multi: true,\r\n};\r\n\r\n@Directive({\r\n    selector: \"[currencyMask]\",\r\n    providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR]\r\n})\r\nexport class CurrencyMaskDirective implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit {\r\n\r\n  @Input() options: Partial<CurrencyMaskConfig> = {};\r\n\r\n  public inputHandler: InputHandler;\r\n  public keyValueDiffer: KeyValueDiffer<any, any>;\r\n\r\n  public optionsTemplate: CurrencyMaskConfig = {\r\n      align: \"right\",\r\n      allowNegative: true,\r\n      allowZero: true,\r\n      decimal: \".\",\r\n      precision: 2,\r\n      prefix: \"$ \",\r\n      suffix: \"\",\r\n      thousands: \",\",\r\n      nullable: false,\r\n      inputMode: CurrencyMaskInputMode.FINANCIAL\r\n  };\r\n\r\n  constructor(@Optional() @Inject(CURRENCY_MASK_CONFIG) private currencyMaskConfig: CurrencyMaskConfig,\r\n                                                        private elementRef: ElementRef,\r\n                                                        private keyValueDiffers: KeyValueDiffers) {\r\n    if (currencyMaskConfig) {\r\n        this.optionsTemplate = currencyMaskConfig;\r\n    }\r\n\r\n    this.keyValueDiffer = keyValueDiffers.find({}).create();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.keyValueDiffer.diff(this.options)) {\r\n      this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\r\n      this.inputHandler.updateOptions((<any>Object).assign({}, this.optionsTemplate, this.options));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.inputHandler = new InputHandler(this.elementRef.nativeElement, (<any>Object).assign({}, this.optionsTemplate, this.options));\r\n  }\r\n\r\n  @HostListener(\"blur\", [\"$event\"])\r\n  handleBlur(event: any) {\r\n    this.inputHandler.getOnModelTouched().apply(event);\r\n  }\r\n\r\n  @HostListener(\"cut\", [\"$event\"])\r\n  handleCut(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleCut(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"input\", [\"$event\"])\r\n  handleInput(event: any) {\r\n    if (this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleInput(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"keydown\", [\"$event\"])\r\n  handleKeydown(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleKeydown(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"keypress\", [\"$event\"])\r\n  handleKeypress(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleKeypress(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"paste\", [\"$event\"])\r\n  handlePaste(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handlePaste(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"drop\", [\"$event\"])\r\n  handleDrop(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  isChromeAndroid(): boolean {\r\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\r\n  }\r\n\r\n  isReadOnly(): boolean {\r\n    return this.elementRef.nativeElement.hasAttribute('readonly')\r\n  }\r\n\r\n  registerOnChange(callbackFunction: Function): void {\r\n    this.inputHandler.setOnModelChange(callbackFunction);\r\n  }\r\n\r\n  registerOnTouched(callbackFunction: Function): void {\r\n    this.inputHandler.setOnModelTouched(callbackFunction);\r\n  }\r\n\r\n  setDisabledState(value: boolean): void {\r\n    this.elementRef.nativeElement.disabled = value;\r\n  }\r\n\r\n  writeValue(value: number): void {\r\n    this.inputHandler.setValue(value);\r\n  }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {CurrencyMaskDirective} from \"./currency-mask.directive\";\r\nimport {CURRENCY_MASK_CONFIG, CurrencyMaskConfig} from \"./currency-mask.config\";\r\n\r\n@NgModule({\r\n  imports: [ CommonModule, FormsModule ],\r\n  declarations: [ CurrencyMaskDirective ],\r\n  exports: [ CurrencyMaskDirective ]\r\n})\r\nexport class NgxCurrencyModule {\r\n  static forRoot(config: CurrencyMaskConfig): ModuleWithProviders<NgxCurrencyModule> {\r\n    return {\r\n      ngModule: NgxCurrencyModule,\r\n      providers: [{\r\n        provide: CURRENCY_MASK_CONFIG,\r\n        useValue: config,\r\n      }]\r\n    }\r\n  }\r\n}\r\n"]}