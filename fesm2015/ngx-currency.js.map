{"version":3,"file":"ngx-currency.js","sources":["ng://ngx-currency/src/currency-mask.config.ts","ng://ngx-currency/src/input.manager.ts","ng://ngx-currency/src/input.service.ts","ng://ngx-currency/src/input.handler.ts","ng://ngx-currency/src/currency-mask.directive.ts","ng://ngx-currency/src/currency-mask.module.ts","ng://ngx-currency/ngx-currency.ts"],"sourcesContent":["import {InjectionToken} from \"@angular/core\";\r\n\r\nexport interface CurrencyMaskConfig {\r\n  align: string;\r\n  allowNegative: boolean;\r\n  allowZero: boolean;\r\n  decimal: string;\r\n  precision: number;\r\n  prefix: string;\r\n  suffix: string;\r\n  thousands: string;\r\n  nullable: boolean;\r\n  min?: number;\r\n  max?: number;\r\n  inputMode? : CurrencyMaskInputMode;\r\n}\r\n\r\nexport enum CurrencyMaskInputMode {\r\n  FINANCIAL,\r\n  NATURAL,\r\n}\r\n\r\nexport let CURRENCY_MASK_CONFIG = new InjectionToken<CurrencyMaskConfig>(\"currency.mask.config\");\r\n","export class InputManager {\r\n\r\n    private _storedRawValue: string;\r\n\r\n    constructor(private htmlInputElement: any) {\r\n    }\r\n\r\n    setCursorAt(position: number): void {\r\n        if (this.htmlInputElement.setSelectionRange) {\r\n            this.htmlInputElement.focus();\r\n            this.htmlInputElement.setSelectionRange(position, position);\r\n        } else if (this.htmlInputElement.createTextRange) {\r\n            let textRange = this.htmlInputElement.createTextRange();\r\n            textRange.collapse(true);\r\n            textRange.moveEnd(\"character\", position);\r\n            textRange.moveStart(\"character\", position);\r\n            textRange.select();\r\n        }\r\n    }\r\n\r\n    updateValueAndCursor(newRawValue: string, oldLength: number, selectionStart: number): void {\r\n        this.rawValue = newRawValue;\r\n        let newLength = newRawValue.length;\r\n        selectionStart = selectionStart - (oldLength - newLength);\r\n        this.setCursorAt(selectionStart);\r\n    }\r\n\r\n    get canInputMoreNumbers(): boolean {\r\n        let onlyNumbers = this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, \"\");\r\n        let haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\r\n        let selectionStart = this.inputSelection.selectionStart;\r\n        let selectionEnd = this.inputSelection.selectionEnd;\r\n        let haveNumberSelected = !!(selectionStart != selectionEnd &&\r\n                                    this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\r\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\r\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\r\n    }\r\n\r\n    get inputSelection(): any {\r\n        let selectionStart = 0;\r\n        let selectionEnd = 0;\r\n\r\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\r\n            selectionStart = this.htmlInputElement.selectionStart;\r\n            selectionEnd = this.htmlInputElement.selectionEnd;\r\n        } else {\r\n            let range = (<any>document).selection.createRange();\r\n\r\n            if (range && range.parentElement() == this.htmlInputElement) {\r\n                let lenght = this.htmlInputElement.value.length;\r\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\r\n                let startRange = this.htmlInputElement.createTextRange();\r\n                startRange.moveToBookmark(range.getBookmark());\r\n                let endRange = this.htmlInputElement.createTextRange();\r\n                endRange.collapse(false);\r\n\r\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\r\n                    selectionStart = selectionEnd = lenght;\r\n                } else {\r\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\r\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\r\n\r\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\r\n                        selectionEnd = lenght;\r\n                    } else {\r\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\r\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            selectionStart: selectionStart,\r\n            selectionEnd: selectionEnd\r\n        };\r\n    }\r\n\r\n    get rawValue(): string {\r\n        return this.htmlInputElement && this.htmlInputElement.value;\r\n    }\r\n\r\n    set rawValue(value: string) {\r\n        this._storedRawValue = value;\r\n\r\n        if (this.htmlInputElement) {\r\n            this.htmlInputElement.value = value;\r\n        }\r\n    }\r\n\r\n    get storedRawValue(): string {\r\n        return this._storedRawValue || '';\r\n    }\r\n}\r\n","import { InputManager } from \"./input.manager\";\r\nimport { CurrencyMaskConfig, CurrencyMaskInputMode } from \"./currency-mask.config\";\r\n\r\nexport class InputService {\r\n    private SINGLE_DIGIT_REGEX: RegExp = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\r\n    private ONLY_NUMBERS_REGEX: RegExp = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\r\n\r\n    PER_AR_NUMBER: Map<string, string> = new Map<string, string>();\r\n\r\n    initialize() {\r\n        this.PER_AR_NUMBER.set(\"\\u06F0\", \"0\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F1\", \"1\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F2\", \"2\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F3\", \"3\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F4\", \"4\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F5\", \"5\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F6\", \"6\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F7\", \"7\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F8\", \"8\");\r\n        this.PER_AR_NUMBER.set(\"\\u06F9\", \"9\");\r\n\r\n        this.PER_AR_NUMBER.set(\"\\u0660\", \"0\");\r\n        this.PER_AR_NUMBER.set(\"\\u0661\", \"1\");\r\n        this.PER_AR_NUMBER.set(\"\\u0662\", \"2\");\r\n        this.PER_AR_NUMBER.set(\"\\u0663\", \"3\");\r\n        this.PER_AR_NUMBER.set(\"\\u0664\", \"4\");\r\n        this.PER_AR_NUMBER.set(\"\\u0665\", \"5\");\r\n        this.PER_AR_NUMBER.set(\"\\u0666\", \"6\");\r\n        this.PER_AR_NUMBER.set(\"\\u0667\", \"7\");\r\n        this.PER_AR_NUMBER.set(\"\\u0668\", \"8\");\r\n        this.PER_AR_NUMBER.set(\"\\u0669\", \"9\");\r\n    }\r\n\r\n    inputManager: InputManager;\r\n\r\n    constructor(private htmlInputElement: any, private options: CurrencyMaskConfig) {\r\n        this.inputManager = new InputManager(htmlInputElement);\r\n        this.initialize()\r\n    }\r\n\r\n    addNumber(keyCode: number): void {\r\n        const {decimal, precision, inputMode} = this.options;\r\n        let keyChar = String.fromCharCode(keyCode);\r\n        const isDecimalChar = keyChar === this.options.decimal;\r\n\r\n        if (!this.rawValue) {\r\n            this.rawValue = this.applyMask(false, keyChar);\r\n            let selectionStart:number = undefined;\r\n            if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {\r\n                selectionStart = this.rawValue.indexOf(decimal);\r\n                if (isDecimalChar) {\r\n                    selectionStart++;\r\n                }\r\n            }\r\n            this.updateFieldValue(selectionStart);\r\n        } else {\r\n            let selectionStart = this.inputSelection.selectionStart;\r\n            let selectionEnd = this.inputSelection.selectionEnd;\r\n            const rawValueStart = this.rawValue.substring(0, selectionStart);\r\n            let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);\r\n\r\n            // In natural mode, replace decimals instead of shifting them.\r\n            const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\r\n            if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && selectionStart === selectionEnd) {\r\n              rawValueEnd = rawValueEnd.substring(1);\r\n            }\r\n\r\n            const newValue = rawValueStart + keyChar + rawValueEnd;\r\n            let nextSelectionStart = selectionStart + 1;\r\n            const isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;\r\n            if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\r\n                // If the cursor is just before the decimal or thousands separator and the user types the\r\n                // decimal or thousands separator, move the cursor past it.\r\n                nextSelectionStart++;\r\n            } else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {\r\n                // Ignore other non-numbers.\r\n                return;\r\n            }\r\n\r\n            this.rawValue = newValue;\r\n            this.updateFieldValue(nextSelectionStart);\r\n        }\r\n    }\r\n\r\n    applyMask(isNumber: boolean, rawValue: string, disablePadAndTrim = false): string {\r\n        let {allowNegative, decimal, precision, prefix, suffix, thousands, min, max, inputMode} = this.options;\r\n\r\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\r\n        let onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\r\n\r\n        if (!onlyNumbers && rawValue !== decimal) {\r\n            return \"\";\r\n        }\r\n\r\n        if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {\r\n            rawValue = this.padOrTrimPrecision(rawValue);\r\n            onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\r\n        }\r\n\r\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision)\r\n            .replace(/^\\u0660*/g, \"\")\r\n            .replace(/^\\u06F0*/g, \"\")\r\n            .replace(/^0*/g, \"\");\r\n\r\n        if (integerPart == \"\") {\r\n            integerPart = \"0\";\r\n        }\r\n        let integerValue = parseInt(integerPart);\r\n\r\n        integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\r\n        if (thousands && integerPart.startsWith(thousands)) {\r\n            integerPart = integerPart.substring(1);\r\n        }\r\n\r\n        let newRawValue = integerPart;\r\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\r\n        let decimalValue = parseInt(decimalPart) || 0;\r\n\r\n        let isNegative = rawValue.indexOf(\"-\") > -1;\r\n\r\n        // Ensure max is at least as large as min.\r\n        max = (this.isNullOrUndefined(max) || this.isNullOrUndefined(min)) ? max : Math.max(max, min);\r\n\r\n        // Restrict to the min and max values.\r\n        let newValue = integerValue + (decimalValue / 100);\r\n        newValue = isNegative ? -newValue : newValue;\r\n        if (!this.isNullOrUndefined(max) && newValue > max) {\r\n            return this.applyMask(true, max + '');\r\n        } else if (!this.isNullOrUndefined(min) && newValue < min) {\r\n            return this.applyMask(true, min + '');\r\n        }\r\n\r\n        if (precision > 0) {\r\n            if (newRawValue == \"0\" && decimalPart.length < precision) {\r\n                newRawValue += decimal + \"0\".repeat(precision - 1) + decimalPart;\r\n            } else {\r\n                newRawValue += decimal + decimalPart;\r\n            }\r\n        }\r\n\r\n        let operator = (isNegative && allowNegative) ? \"-\" : \"\";\r\n        return operator + prefix + newRawValue + suffix;\r\n    }\r\n\r\n    padOrTrimPrecision(rawValue: string): string {\r\n        let {decimal, precision} = this.options;\r\n\r\n        let decimalIndex = rawValue.lastIndexOf(decimal);\r\n        if (decimalIndex === -1) {\r\n            decimalIndex = rawValue.length;\r\n            rawValue += decimal;\r\n        }\r\n\r\n        let decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, \"\");\r\n        const actualPrecision = decimalPortion.length;\r\n        if (actualPrecision < precision) {\r\n            for (let i = actualPrecision; i < precision; i++) {\r\n                decimalPortion += '0';\r\n            }\r\n        } else if (actualPrecision > precision) {\r\n            decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\r\n        }\r\n\r\n        return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\r\n    }\r\n\r\n    clearMask(rawValue: string): number {\r\n        if (this.isNullable() && rawValue === \"\")\r\n            return null;\r\n\r\n        let value = (rawValue || \"0\").replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\r\n\r\n        if (this.options.thousands) {\r\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\r\n        }\r\n\r\n        if (this.options.decimal) {\r\n            value = value.replace(this.options.decimal, \".\");\r\n        }\r\n\r\n        this.PER_AR_NUMBER.forEach((val: string, key: string) => {\r\n            const re = new RegExp(key, \"g\");\r\n            value = value.replace(re, val);\r\n        });\r\n        return parseFloat(value);\r\n    }\r\n\r\n    changeToNegative(): void {\r\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\") {\r\n            // Apply the mask to ensure the min and max values are enforced.\r\n            this.rawValue = this.applyMask(false, \"-\" + (this.rawValue ? this.rawValue : '0'));\r\n        }\r\n    }\r\n\r\n    changeToPositive(): void {\r\n        // Apply the mask to ensure the min and max values are enforced.\r\n        this.rawValue = this.applyMask(false, this.rawValue.replace(\"-\", \"\"));\r\n    }\r\n\r\n    removeNumber(keyCode: number): void {\r\n        let {decimal, thousands, prefix, suffix, inputMode} = this.options;\r\n\r\n        if (this.isNullable() && this.value == 0) {\r\n            this.rawValue = null;\r\n            return;\r\n        }\r\n\r\n        let selectionEnd = this.inputSelection.selectionEnd;\r\n        let selectionStart = this.inputSelection.selectionStart;\r\n\r\n        const suffixStart = this.rawValue.length - suffix.length;\r\n        selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\r\n        selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));\r\n\r\n        // Check if selection was entirely in the prefix or suffix. \r\n        if (selectionStart === selectionEnd &&\r\n            this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\r\n            this.updateFieldValue(selectionStart);\r\n            return;\r\n        }\r\n\r\n        let decimalIndex = this.rawValue.indexOf(decimal);\r\n        if (decimalIndex === -1) {\r\n            decimalIndex = this.rawValue.length;\r\n        }\r\n\r\n        let shiftSelection = 0;\r\n        let insertChars = '';\r\n        const isCursorInDecimals = decimalIndex < selectionEnd;\r\n        const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\r\n        if (selectionEnd === selectionStart) {\r\n            if (keyCode == 8) {\r\n                if (selectionStart <= prefix.length) {\r\n                    return;\r\n                }\r\n                selectionStart--;\r\n\r\n                // If previous char isn't a number, go back one more.\r\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\r\n                    selectionStart--;\r\n                }\r\n\r\n                // In natural mode, jump backwards when in decimal portion of number.\r\n                if (inputMode === CurrencyMaskInputMode.NATURAL && isCursorInDecimals) {\r\n                    shiftSelection = -1;\r\n                    // when removing a single whole number, replace it with 0\r\n                    if (isCursorImmediatelyAfterDecimalPoint && this.value < 10 && this.value > -10) {\r\n                        insertChars += '0';\r\n                    }\r\n                }\r\n            } else if (keyCode == 46 || keyCode == 63272) {\r\n                if (selectionStart === suffixStart) {\r\n                    return;\r\n                }\r\n                selectionEnd++;\r\n\r\n                // If next char isn't a number, go one more.\r\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\r\n                    selectionStart++;\r\n                    selectionEnd++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // In natural mode, replace decimals with 0s.\r\n        if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {\r\n            const replacedDecimalCount = selectionEnd - selectionStart;\r\n            for (let i = 0; i < replacedDecimalCount; i++) {\r\n                insertChars += '0';\r\n            }\r\n        }\r\n\r\n        let selectionFromEnd = this.rawValue.length - selectionEnd;\r\n        this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd);\r\n\r\n        // Remove leading thousand separator from raw value.\r\n        const startChar = this.rawValue.substr(prefix.length, 1);\r\n        if (startChar === thousands) {\r\n            this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\r\n            selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\r\n        }\r\n\r\n        this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\r\n    }\r\n\r\n    updateFieldValue(selectionStart?: number, disablePadAndTrim = false): void {\r\n        let newRawValue = this.applyMask(false, this.rawValue || \"\", disablePadAndTrim);\r\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\r\n        selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));\r\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\r\n    }\r\n\r\n    updateOptions(options: any): void {\r\n        let value: number = this.value;\r\n        this.options = options;\r\n        this.value = value;\r\n    }\r\n\r\n    prefixLength(): any {\r\n        return this.options.prefix.length;\r\n    }\r\n\r\n    suffixLength(): any {\r\n        return this.options.suffix.length;\r\n    }\r\n\r\n    isNullable() {\r\n        return this.options.nullable;\r\n    }\r\n\r\n    get canInputMoreNumbers(): boolean {\r\n        return this.inputManager.canInputMoreNumbers;\r\n    }\r\n\r\n    get inputSelection(): any {\r\n        return this.inputManager.inputSelection;\r\n    }\r\n\r\n    get rawValue(): string {\r\n        return this.inputManager.rawValue;\r\n    }\r\n\r\n    set rawValue(value: string) {\r\n        this.inputManager.rawValue = value;\r\n    }\r\n\r\n    get storedRawValue(): string {\r\n        return this.inputManager.storedRawValue;\r\n    }\r\n\r\n    get value(): number {\r\n        return this.clearMask(this.rawValue);\r\n    }\r\n\r\n    set value(value: number) {\r\n        this.rawValue = this.applyMask(true, \"\" + value);\r\n    }\r\n\r\n    private isNullOrUndefined(value: any) {\r\n        return value === null || value === undefined;\r\n    }\r\n}\r\n","import {InputService} from \"./input.service\";\r\n\r\nexport class InputHandler {\r\n\r\n    private inputService: InputService;\r\n    private onModelChange: Function;\r\n    private onModelTouched: Function;\r\n\r\n    constructor(htmlInputElement: HTMLInputElement, options: any) {\r\n        this.inputService = new InputService(htmlInputElement, options);\r\n    }\r\n\r\n    handleCut(event: any): void {\r\n        setTimeout(() => {\r\n            this.inputService.updateFieldValue();\r\n            this.setValue(this.inputService.value);\r\n            this.onModelChange(this.inputService.value);\r\n        }, 0);\r\n    }\r\n\r\n    handleInput(event: any): void {\r\n        let selectionStart = this.inputService.inputSelection.selectionStart;\r\n        let keyCode = this.inputService.rawValue.charCodeAt(selectionStart - 1);\r\n        let rawValueLength = this.inputService.rawValue.length;\r\n        let storedRawValueLength = this.inputService.storedRawValue.length;\r\n\r\n        if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\r\n            this.inputService.updateFieldValue(selectionStart);\r\n            this.onModelChange(this.inputService.value);\r\n            return;\r\n        }\r\n\r\n        // Restore the old value.\r\n        this.inputService.rawValue = this.inputService.storedRawValue;\r\n\r\n        if (rawValueLength < storedRawValueLength) {\r\n            // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\r\n            // input event, so we need to wrap this in a timeout.\r\n            this.timer(() => {\r\n                // Move the cursor to just after the deleted value.\r\n                this.inputService.updateFieldValue(selectionStart + 1);\r\n\r\n                // Then backspace it.\r\n                this.inputService.removeNumber(8);\r\n                this.onModelChange(this.inputService.value);  \r\n            }, 0);\r\n        }\r\n\r\n        if (rawValueLength > storedRawValueLength) {\r\n            // Move the cursor to just before the new value.\r\n            this.inputService.updateFieldValue(selectionStart - 1);\r\n\r\n            // Process the character like a keypress.\r\n            this.handleKeypressImpl(keyCode);\r\n        }\r\n    }\r\n\r\n    handleKeydown(event: any): void {\r\n        let keyCode = event.which || event.charCode || event.keyCode;\r\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\r\n            event.preventDefault();\r\n\r\n            if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() &&\r\n                this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {\r\n                this.clearValue();\r\n            } else {\r\n                this.inputService.removeNumber(keyCode);\r\n                this.onModelChange(this.inputService.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearValue() {\r\n        this.setValue(this.inputService.isNullable() ? null : 0);\r\n        this.onModelChange(this.inputService.value);\r\n    }\r\n\r\n    handleKeypress(event: any): void {\r\n        let keyCode = event.which || event.charCode || event.keyCode;\r\n        event.preventDefault();\r\n        if (keyCode === 97 && event.ctrlKey) {\r\n            return;\r\n        }\r\n\r\n        this.handleKeypressImpl(keyCode);\r\n    }\r\n\r\n    private handleKeypressImpl(keyCode: number): void {\r\n        switch (keyCode) {\r\n            case undefined:\r\n            case 9:\r\n            case 13:\r\n                return;\r\n            case 43:\r\n                this.inputService.changeToPositive();\r\n                break;\r\n            case 45:\r\n                this.inputService.changeToNegative();\r\n                break;\r\n            default:\r\n                if (this.inputService.canInputMoreNumbers) {\r\n                    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\r\n\r\n                    if (selectionRangeLength == this.inputService.rawValue.length) {\r\n                        this.setValue(null);\r\n                    }\r\n\r\n                    this.inputService.addNumber(keyCode);\r\n                }\r\n                break;\r\n        }\r\n\r\n        this.onModelChange(this.inputService.value);\r\n    }\r\n\r\n    handlePaste(event: any): void {\r\n        setTimeout(() => {\r\n            this.inputService.updateFieldValue();\r\n            this.setValue(this.inputService.value);\r\n            this.onModelChange(this.inputService.value);\r\n        }, 1);\r\n    }\r\n\r\n    updateOptions(options: any): void {\r\n        this.inputService.updateOptions(options);\r\n    }\r\n\r\n    getOnModelChange(): Function {\r\n        return this.onModelChange;\r\n    }\r\n\r\n    setOnModelChange(callbackFunction: Function): void {\r\n        this.onModelChange = callbackFunction;\r\n    }\r\n\r\n    getOnModelTouched(): Function {\r\n        return this.onModelTouched;\r\n    }\r\n\r\n    setOnModelTouched(callbackFunction: Function) {\r\n        this.onModelTouched = callbackFunction;\r\n    }\r\n\r\n    setValue(value: number): void {\r\n        this.inputService.value = value;\r\n    }\r\n\r\n    /**\r\n     * Passthrough to setTimeout that can be stubbed out in tests.\r\n     */\r\n    private timer(callback: () => void, delayMillis: number) {\r\n        setTimeout(callback, delayMillis);\r\n    }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostListener,\r\n  Inject,\r\n  KeyValueDiffer,\r\n  KeyValueDiffers,\r\n  Input,\r\n  OnInit,\r\n  Optional\r\n} from \"@angular/core\";\r\n\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\r\nimport {CurrencyMaskConfig, CURRENCY_MASK_CONFIG, CurrencyMaskInputMode} from \"./currency-mask.config\";\r\nimport {InputHandler} from \"./input.handler\";\r\n\r\nexport const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => CurrencyMaskDirective),\r\n  multi: true,\r\n};\r\n\r\n@Directive({\r\n    selector: \"[currencyMask]\",\r\n    providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR]\r\n})\r\nexport class CurrencyMaskDirective implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit {\r\n\r\n  @Input() options: Partial<CurrencyMaskConfig> = {};\r\n\r\n  public inputHandler: InputHandler;\r\n  public keyValueDiffer: KeyValueDiffer<any, any>;\r\n\r\n  public optionsTemplate: CurrencyMaskConfig = {\r\n      align: \"right\",\r\n      allowNegative: true,\r\n      allowZero: true,\r\n      decimal: \".\",\r\n      precision: 2,\r\n      prefix: \"$ \",\r\n      suffix: \"\",\r\n      thousands: \",\",\r\n      nullable: false,\r\n      inputMode: CurrencyMaskInputMode.FINANCIAL\r\n  };\r\n\r\n  constructor(@Optional() @Inject(CURRENCY_MASK_CONFIG) private currencyMaskConfig: CurrencyMaskConfig,\r\n                                                        private elementRef: ElementRef,\r\n                                                        private keyValueDiffers: KeyValueDiffers) {\r\n    if (currencyMaskConfig) {\r\n        this.optionsTemplate = currencyMaskConfig;\r\n    }\r\n\r\n    this.keyValueDiffer = keyValueDiffers.find({}).create();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.keyValueDiffer.diff(this.options)) {\r\n      this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\r\n      this.inputHandler.updateOptions((<any>Object).assign({}, this.optionsTemplate, this.options));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.inputHandler = new InputHandler(this.elementRef.nativeElement, (<any>Object).assign({}, this.optionsTemplate, this.options));\r\n  }\r\n\r\n  @HostListener(\"blur\", [\"$event\"])\r\n  handleBlur(event: any) {\r\n    this.inputHandler.getOnModelTouched().apply(event);\r\n  }\r\n\r\n  @HostListener(\"cut\", [\"$event\"])\r\n  handleCut(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleCut(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"input\", [\"$event\"])\r\n  handleInput(event: any) {\r\n    if (this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleInput(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"keydown\", [\"$event\"])\r\n  handleKeydown(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleKeydown(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"keypress\", [\"$event\"])\r\n  handleKeypress(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handleKeypress(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"paste\", [\"$event\"])\r\n  handlePaste(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      !this.isReadOnly() && this.inputHandler.handlePaste(event);\r\n    }\r\n  }\r\n\r\n  @HostListener(\"drop\", [\"$event\"])\r\n  handleDrop(event: any) {\r\n    if (!this.isChromeAndroid()) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  isChromeAndroid(): boolean {\r\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\r\n  }\r\n\r\n  isReadOnly(): boolean {\r\n    return this.elementRef.nativeElement.hasAttribute('readonly')\r\n  }\r\n\r\n  registerOnChange(callbackFunction: Function): void {\r\n    this.inputHandler.setOnModelChange(callbackFunction);\r\n  }\r\n\r\n  registerOnTouched(callbackFunction: Function): void {\r\n    this.inputHandler.setOnModelTouched(callbackFunction);\r\n  }\r\n\r\n  setDisabledState(value: boolean): void {\r\n    this.elementRef.nativeElement.disabled = value;\r\n  }\r\n\r\n  writeValue(value: number): void {\r\n    this.inputHandler.setValue(value);\r\n  }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {CurrencyMaskDirective} from \"./currency-mask.directive\";\r\nimport {CURRENCY_MASK_CONFIG, CurrencyMaskConfig} from \"./currency-mask.config\";\r\n\r\n@NgModule({\r\n  imports: [ CommonModule, FormsModule ],\r\n  declarations: [ CurrencyMaskDirective ],\r\n  exports: [ CurrencyMaskDirective ]\r\n})\r\nexport class NgxCurrencyModule {\r\n  static forRoot(config: CurrencyMaskConfig): ModuleWithProviders<NgxCurrencyModule> {\r\n    return {\r\n      ngModule: NgxCurrencyModule,\r\n      providers: [{\r\n        provide: CURRENCY_MASK_CONFIG,\r\n        useValue: config,\r\n      }]\r\n    }\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {CURRENCY_MASK_CONFIG as ɵa} from './src/currency-mask.config';"],"names":[],"mappings":"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"}